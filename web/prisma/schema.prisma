generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  username       String    @unique @default("null")
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  type    String  @default("student")
  subject String?
  bio     String? @default("This user is too lazy to set his/her bio...")
  role    String  @default("user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromFriendships Friendship[] @relation("FromUser")
  toFriendships   Friendship[] @relation("ToUser")

  accounts Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Friendship {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  fromUser   User             @relation("FromUser", fields: [fromUserId], references: [id])
  fromUserId String           @db.ObjectId
  toUser     User             @relation("ToUser", fields: [toUserId], references: [id])
  toUserId   String           @db.ObjectId
  status     FriendshipStatus @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromUserId, toUserId])
}

enum FriendshipStatus {
  rejected
  pending
  accepted
}
